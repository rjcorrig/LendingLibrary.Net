using System.Web.Http;
using System.Web.Http.ExceptionHandling;
using LendingLibrary.Api.GlobalHandlers;
using Microsoft.Owin.Security.OAuth;
using Newtonsoft.Json.Serialization;

namespace LendingLibrary
{
    public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {
			// Web API configuration and services

			config.EnableSystemDiagnosticsTracing();

            // Configure WebApi to use only bearer token authentication
            config.SuppressDefaultHostAuthentication();
            config.Filters.Add(new HostAuthenticationFilter(OAuthDefaults.AuthenticationType));

            // Serialize to JSON
            var json = config.Formatters.JsonFormatter;
            json.SerializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore;
            json.SerializerSettings.Formatting = Newtonsoft.Json.Formatting.Indented;

            json.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
            json.UseDataContractJsonSerializer = false;

            config.Formatters.Remove(config.Formatters.XmlFormatter);

            // Web API routes
            config.MapHttpAttributeRoutes();

            config.Routes.MapHttpRoute(
                name: "DefaultApi",
                routeTemplate: "api/{controller}/{id}",
                defaults: new { id = RouteParameter.Optional }
            );

            // Catch any uncaught exceptions and wrap them in an ApiError
            config.Services.Replace(typeof(IExceptionHandler), new GlobalExceptionHandler());

            // Catch any HttpError responses generated by the framework and wrap them in an ApiError
            config.MessageHandlers.Add(new GlobalMessageHandler());

            // Tell Web API to use application's Unity container for DI
            var container = UnityConfig.Container;
            config.DependencyResolver = new UnityResolver(container);
        }
    }
}
